// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Models
model User {
  id          Int      @id @default(autoincrement())
  username    String   @unique
  password    String
  name        String
  surname     String
  email       String   @unique
  photo       String?
  phone       String?
  description String?
  personal_id String?
  rating      Float?
  role        Role     @default(SUPPLIER)
  key         String
  verified    Boolean  @default(false)
  active      Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  services       Service[]
  chats_as_user1 Chat[]    @relation("chats_as_user1")
  chats_as_user2 Chat[]    @relation("chats_as_user2")
  messages       Message[]

  @@map("users")
}

enum Role {
  ADMIN
  CUSTUMER
  SUPPLIER
}

model ServiceType {
  id          Int      @id @default(autoincrement())
  name        String
  description String
  url_image   String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  services Service[]

  @@map("service_types")
}

model Service {
  id           Int      @id @default(autoincrement())
  description  String
  hourly_price Float?
  rating       Float?
  reviews      Float?
  times_hired  Float?
  shown        Boolean  @default(true)
  active       Boolean  @default(true)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  user_id         Int
  user            User        @relation(fields: [user_id], references: [id])
  service_type_id Int
  service_type    ServiceType @relation(fields: [service_type_id], references: [id])

  @@map("services")
}

model Chat {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user1_id Int
  user1    User      @relation("chats_as_user1", fields: [user1_id], references: [id])
  user2_id Int
  user2    User      @relation("chats_as_user2", fields: [user2_id], references: [id])
  messages Message[]

  @@map("chats")
}

model Message {
  id        Int      @id @default(autoincrement())
  message   String
  timestamp DateTime @default(now())

  sender_id Int
  sender    User @relation(fields: [sender_id], references: [id])
  chat_id   Int
  chat      Chat @relation(fields: [chat_id], references: [id])

  @@map("messages")
}
