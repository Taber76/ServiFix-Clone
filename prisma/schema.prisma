// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Models
model User {
  id                 Int      @id @default(autoincrement())
  username           String   @unique
  password           String
  name               String
  surname            String
  email              String   @unique
  photo              String?
  phone              String?
  description        String?
  personal_id        String?
  rating             Float?
  role               Role     @default(SUPPLIER)
  key                String
  password_reset_key String?
  verified           Boolean  @default(false)
  active             Boolean  @default(true)
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt

  services       Service[]
  chats_as_user1 Chat[]    @relation("chats_as_user1")
  chats_as_user2 Chat[]    @relation("chats_as_user2")
  messages       Message[]
  reviews        Review[]

  @@map("users")
}

enum Role {
  ADMIN
  CUSTUMER
  SUPPLIER
}

model ServiceType {
  id          Int      @id @default(autoincrement())
  name        String
  description String
  url_image   String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  services Service[]

  @@map("service_types")
}

model Service {
  id           Int      @id @default(autoincrement())
  title        String
  username     String
  description  String
  hourly_price Float?
  currency     String   @default("USD")
  rating       Float    @default(0)
  num_reviews  Float    @default(0)
  times_hired  Float    @default(0)
  url_image    String?
  isVerified   Boolean  @default(false)
  shown        Boolean  @default(true)
  active       Boolean  @default(true)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  user_id         Int
  user            User        @relation(fields: [user_id], references: [id])
  service_type_id Int
  service_type    ServiceType @relation(fields: [service_type_id], references: [id])
  country_id      Int         @default(1)
  country         Country     @relation(fields: [country_id], references: [id])
  city_id         Int         @default(1)
  city            City        @relation(fields: [city_id], references: [id])
  reviews         Review[]

  @@map("services")
}

model Review {
  id      Int     @id @default(autoincrement())
  rating  Float
  title   String?
  comment String
  active  Boolean @default(true)
  by      String?

  user_id    Int
  user       User    @relation(fields: [user_id], references: [id])
  service_id Int
  service    Service @relation(fields: [service_id], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("reviews")
}

model Chat {
  id             Int      @id @default(autoincrement())
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  user1_photo    String?
  user1_username String?
  user2_photo    String?
  user2_username String?
  service_id     Int?     @default(0)
  service_image  String?
  service_title  String?
  last_message   String?

  user1_id Int
  user1    User      @relation("chats_as_user1", fields: [user1_id], references: [id])
  user2_id Int
  user2    User      @relation("chats_as_user2", fields: [user2_id], references: [id])
  messages Message[]

  @@map("chats")
}

model Message {
  id        Int      @id @default(autoincrement())
  message   String
  timestamp DateTime @default(now())

  sender_id Int
  sender    User @relation(fields: [sender_id], references: [id])
  chat_id   Int
  chat      Chat @relation(fields: [chat_id], references: [id])

  @@map("messages")
}

model Country {
  id   Int    @id @default(autoincrement())
  name String

  services Service[]
  cities   City[]

  @@map("countries")
}

model City {
  id   Int    @id @default(autoincrement())
  name String

  services   Service[]
  country_id Int
  country    Country   @relation(fields: [country_id], references: [id])

  @@map("cities")
}

// for websocket
model Online {
  id        Int    @id @default(autoincrement())
  socket_id String
  user_id   Int

  @@map("onlines")
}
